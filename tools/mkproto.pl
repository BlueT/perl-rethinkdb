#!/usr/bin/perl

use feature ':5.16';

use strict;
use warnings;

use Data::Dumper;

sub convert {
  my $lines = shift;

  my $new_lines = [ '# DO NOT EDIT', '# Autogenerated by mkproto.pl', '', 'my $proto => {' ];

  foreach my $line ( @{$lines} ) {
    if ( $line =~ /^(\s*)(message|enum) (?P<name>\w+) \{/ ) {
      if ( defined $1 && $2 && $3 ) {
        push @{$new_lines}, "  $1$3 => {";
      }
    }
    elsif ( $line =~ /^(\s*)(?P<name>\w+)\s*=\s*(?P<value>\w+)/ ) {
      if ( defined $1 && $2 && $3 ) {
        push @{$new_lines}, "  $1$2 => $3,";
      }
    }
    elsif ( $line =~ /^(\s*)\}/ ) {
      if ( defined $1 ) {
        my $part = "  $1},\n";
        if( @{$new_lines}[$#{$new_lines}] =~ /\{$/ ) {
          pop @{$new_lines};
        }
        elsif( @{$new_lines}[$#{$new_lines}] =~ /\},\n/ ) {
          @{$new_lines}[$#{$new_lines}] =~ s/\n$//;
          push @{$new_lines}, $part;
        }
        else {
          push @{$new_lines}, $part;
        }
      }
    }
  }

  push @{$new_lines}, "};";

  return $new_lines;
}

sub convert2 {
  my $lines = shift;

  my $package = [];
  my $sub_package = [];
  my $new_lines = [];
  my $lc = q{};

  foreach my $line ( @{$lines} ) {
    if ( $line =~ /^(\s*)(message) (?P<name>\w+) \{/ ) {
      # if ( defined $1 && $2 && $3 ) {
      if ( defined $1 && $2 && $3 && $3 ne 'AssocPair' ) {
        $lc = lcfirst $3;
        push @{$new_lines}, @{$sub_package}, '';
        push @{$new_lines}, "package Rethinkdb::Protocol::$3;";
        push @{$new_lines}, 'use Rethinkdb::Base -base;';
        push @{$package}, "has '$lc' => sub { Rethinkdb::Protocol::$3->new; };";
        $sub_package = [];
      }
    }
    elsif ( $line =~ /^(\s*)(message|enum) (?P<name>\w+) \{/ ) {
      if ( defined $1 && $2 && $3 ) {
        $lc = lcfirst $3;
        push @{$new_lines}, "has '$lc' => sub { Rethinkdb::Protocol::$3->new; };";
        push @{$sub_package}, '', "package Rethinkdb::Protocol::$3;", 'use Rethinkdb::Base -base;';
        # push @{$sub_package}, '1;', '', "package $3;", 'use Rethinkdb::Base -base;';
      }
    }
    elsif ( $line =~ /^(\s*)(?P<name>\w+)\s*=\s*(?P<value>\w+)/ ) {
      if ( defined $1 && $2 && $3 ) {
        $lc = lc $2;
        push @{$sub_package}, "has '$lc' => $3;";
      }
    }
  }

  if( @{$sub_package} ) {
    push @{$new_lines}, @{$sub_package};
  }

  unshift @{$new_lines}, '# DO NOT EDIT',
    '# Autogenerated by mkproto.pl',
    '',
    'package Rethinkdb::Protocol;',
    'use Rethinkdb::Base -base;',
    @{$package};

  push @{$new_lines}, '', '1;';

  return $new_lines;
}

sub convert_write {
  my $input  = shift;
  my $output = shift;

  open my $file, '<', $input or die "Could not open `$input`";
  my @lines = <$file>;
  close $file;

  my $stuff = convert2 \@lines;
  my $lines = join "\n", @{$stuff};

  open $file, '>', $output or die "Could not open `$output`";
  say $file $lines;
  close $file;
}

convert_write( 'external/ql2.proto', 'lib/Rethinkdb/Protocol.pm' );
say 'Done.';
